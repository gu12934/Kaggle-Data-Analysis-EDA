a file for analyzing covid data for the UNBDC 2021 competition{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os\nif not os.path.exists(\"../input/reddit_vm.csv\"):\nfrom learntools.core import binder\nbinder.bind(globals())\n\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2021-08-20T03:17:09.356442Z","iopub.execute_input":"2021-08-20T03:17:09.356839Z","iopub.status.idle":"2021-08-20T03:17:09.371988Z","shell.execute_reply.started":"2021-08-20T03:17:09.356745Z","shell.execute_reply":"2021-08-20T03:17:09.370249Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-32b1ba891bf6>\"\u001b[0;36m, line \u001b[0;32m9\u001b[0m\n\u001b[0;31m    from learntools.core import binder\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block\n"],"ename":"IndentationError","evalue":"expected an indented block (<ipython-input-1-32b1ba891bf6>, line 9)","output_type":"error"}]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-08-20T03:17:09.373418Z","iopub.status.idle":"2021-08-20T03:17:09.374107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os\nif not os.path.exists(\"../input/reddit_vm.csv\"):\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_viz_to_coder.ex1 import *\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2021-05-25T03:54:57.659063Z","iopub.execute_input":"2021-05-25T03:54:57.659648Z"}}},{"cell_type":"code","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Path of the file to read\n#../input/reddit-vaccine-myths/reddit_vm.csv\n#../input/fifacsv/fifa.csv\n#vaccine data wont print because it doesnt have numbers \nvaccine_filepath = \"../input/reddit-vaccine-myths/reddit_vm.csv\"\n\n# Read the file into a variable fifa_data\nvaccine_data = pd.read_csv(vaccine_filepath)\nprint(vaccine_data)\nvaccine_data.head()\n\n# Set the width and height of the figure\nplt.figure(figsize=(16,6))\n\n# Line chart showing how FIFA rankings evolved over time \nsns.lineplot(data=vaccine_data)\n\n#Bar chart showing\n#sns.barplot(x=flight_data.index, y=flight_data['NK']\n#sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'] \n","metadata":{"execution":{"iopub.status.busy":"2021-08-20T03:17:32.627589Z","iopub.execute_input":"2021-08-20T03:17:32.627957Z","iopub.status.idle":"2021-08-20T03:17:32.746560Z","shell.execute_reply.started":"2021-08-20T03:17:32.627926Z","shell.execute_reply":"2021-08-20T03:17:32.744729Z"},"trusted":true},"execution_count":3,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-4d30e4e4a660>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Read the file into a variable fifa_data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mvaccine_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvaccine_filepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvaccine_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mvaccine_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    608\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 610\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    611\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    460\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    461\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 462\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    463\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    464\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    817\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1048\u001b[0m             )\n\u001b[1;32m   1049\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1050\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1051\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1052\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1866\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1867\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1868\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1869\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"encoding\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"compression\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m   1366\u001b[0m             \u001b[0mcompression\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"compression\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1367\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1368\u001b[0;31m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1369\u001b[0m         )\n\u001b[1;32m   1370\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    645\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    646\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 647\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    648\u001b[0m             )\n\u001b[1;32m    649\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../input/reddit-vaccine-myths/reddit_vm.csv'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '../input/reddit-vaccine-myths/reddit_vm.csv'","output_type":"error"}]},{"cell_type":"code","source":"#file path - ../input/covid-world-vaccination-progress/country_vaccinations.csv\n\n#libraries\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Path of the file to read\n#../input/reddit-vaccine-myths/reddit_vm.csv\n#../input/fifacsv/fifa.csv\n#vaccine data wont print because it doesnt have numbers \nvaccine_filepath = \"../input/covid-world-vaccination-progress/country_vaccinations.csv\"\n\n# Read the file into a variable fifa_data\nvaccine_data = pd.read_csv(vaccine_filepath)\nprint(vaccine_data)\nvaccine_data.head()\n\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Line chart showing how FIFA rankings evolved over time \n#sns.lineplot(data=vaccine_data)\n\n#Bar chart showing\nsns.barplot(x=vaccine_data['iso_code'], y=vaccine_data['total_vaccinations'] ) \nplt.title(\"Total Vaccinations by Country ISO code\")\n#sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges']  ","metadata":{"execution":{"iopub.status.busy":"2021-08-20T03:17:18.532365Z","iopub.execute_input":"2021-08-20T03:17:18.532722Z","iopub.status.idle":"2021-08-20T03:17:29.547660Z","shell.execute_reply.started":"2021-08-20T03:17:18.532691Z","shell.execute_reply":"2021-08-20T03:17:29.546516Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"           country iso_code        date  total_vaccinations  \\\n0      Afghanistan      AFG  2021-02-22                 0.0   \n1      Afghanistan      AFG  2021-02-23                 NaN   \n2      Afghanistan      AFG  2021-02-24                 NaN   \n3      Afghanistan      AFG  2021-02-25                 NaN   \n4      Afghanistan      AFG  2021-02-26                 NaN   \n...            ...      ...         ...                 ...   \n38374     Zimbabwe      ZWE  2021-08-13                 NaN   \n38375     Zimbabwe      ZWE  2021-08-14           3234909.0   \n38376     Zimbabwe      ZWE  2021-08-15           3289258.0   \n38377     Zimbabwe      ZWE  2021-08-16           3345985.0   \n38378     Zimbabwe      ZWE  2021-08-17           3450959.0   \n\n       people_vaccinated  people_fully_vaccinated  daily_vaccinations_raw  \\\n0                    0.0                      NaN                     NaN   \n1                    NaN                      NaN                     NaN   \n2                    NaN                      NaN                     NaN   \n3                    NaN                      NaN                     NaN   \n4                    NaN                      NaN                     NaN   \n...                  ...                      ...                     ...   \n38374                NaN                      NaN                     NaN   \n38375          2036008.0                1198901.0                     NaN   \n38376          2064023.0                1225235.0                 54349.0   \n38377          2091259.0                1254726.0                 56727.0   \n38378          2145237.0                1305722.0                104974.0   \n\n       daily_vaccinations  total_vaccinations_per_hundred  \\\n0                     NaN                            0.00   \n1                  1367.0                             NaN   \n2                  1367.0                             NaN   \n3                  1367.0                             NaN   \n4                  1367.0                             NaN   \n...                   ...                             ...   \n38374             56484.0                             NaN   \n38375             54502.0                           21.76   \n38376             57530.0                           22.13   \n38377             57782.0                           22.51   \n38378             68200.0                           23.22   \n\n       people_vaccinated_per_hundred  people_fully_vaccinated_per_hundred  \\\n0                               0.00                                  NaN   \n1                                NaN                                  NaN   \n2                                NaN                                  NaN   \n3                                NaN                                  NaN   \n4                                NaN                                  NaN   \n...                              ...                                  ...   \n38374                            NaN                                  NaN   \n38375                          13.70                                 8.07   \n38376                          13.89                                 8.24   \n38377                          14.07                                 8.44   \n38378                          14.43                                 8.79   \n\n       daily_vaccinations_per_million  \\\n0                                 NaN   \n1                                35.0   \n2                                35.0   \n3                                35.0   \n4                                35.0   \n...                               ...   \n38374                          3800.0   \n38375                          3667.0   \n38376                          3871.0   \n38377                          3888.0   \n38378                          4589.0   \n\n                                                vaccines  \\\n0      Johnson&Johnson, Oxford/AstraZeneca, Pfizer/Bi...   \n1      Johnson&Johnson, Oxford/AstraZeneca, Pfizer/Bi...   \n2      Johnson&Johnson, Oxford/AstraZeneca, Pfizer/Bi...   \n3      Johnson&Johnson, Oxford/AstraZeneca, Pfizer/Bi...   \n4      Johnson&Johnson, Oxford/AstraZeneca, Pfizer/Bi...   \n...                                                  ...   \n38374  Oxford/AstraZeneca, Sinopharm/Beijing, Sinovac...   \n38375  Oxford/AstraZeneca, Sinopharm/Beijing, Sinovac...   \n38376  Oxford/AstraZeneca, Sinopharm/Beijing, Sinovac...   \n38377  Oxford/AstraZeneca, Sinopharm/Beijing, Sinovac...   \n38378  Oxford/AstraZeneca, Sinopharm/Beijing, Sinovac...   \n\n                     source_name  \\\n0      World Health Organization   \n1      World Health Organization   \n2      World Health Organization   \n3      World Health Organization   \n4      World Health Organization   \n...                          ...   \n38374         Ministry of Health   \n38375         Ministry of Health   \n38376         Ministry of Health   \n38377         Ministry of Health   \n38378         Ministry of Health   \n\n                                          source_website  \n0                               https://covid19.who.int/  \n1                               https://covid19.who.int/  \n2                               https://covid19.who.int/  \n3                               https://covid19.who.int/  \n4                               https://covid19.who.int/  \n...                                                  ...  \n38374  https://www.arcgis.com/home/webmap/viewer.html...  \n38375  https://www.arcgis.com/home/webmap/viewer.html...  \n38376  https://www.arcgis.com/home/webmap/viewer.html...  \n38377  https://www.arcgis.com/home/webmap/viewer.html...  \n38378  https://www.arcgis.com/home/webmap/viewer.html...  \n\n[38379 rows x 15 columns]\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Total Vaccinations by Country ISO code')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1440x720 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}
